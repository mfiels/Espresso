// Generated by CoffeeScript 1.3.3
(function() {
  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 
// requestAnimationFrame polyfill by Erik MÃ¶ller
// fixes from Paul Irish and Tino Zijdel
 
(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                   || window[vendors[x]+'CancelRequestAnimationFrame'];
    }
 
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); },
              timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
 
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
}());;

  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require.config({
    paths: {
      'espresso': '../../espresso/js'
    }
  });

  define('Block', ['espresso/display/Sprite', 'espresso/display/Stage'], function(Sprite, Stage) {
    var Block;
    return Block = (function(_super) {

      __extends(Block, _super);

      function Block(x, y) {
        Block.__super__.constructor.call(this, x, y);
        this.setSource('img/block.png');
        this.vx = (Math.random() * 3 + 1) * (Math.random() > 0.5 ? -1 : 1);
        this.vy = (Math.random() * 3 + 1) * (Math.random() > 0.5 ? -1 : 1);
        this.vr = (Math.random() + 0.25) * (Math.random() > 0.5 ? -1 : 1);
        this.anchorX = this.anchorY = 236 / 2;
      }

      Block.prototype.update = function(e) {
        this.x += this.vx * e.elapsed / 17;
        this.y += this.vy * e.elapsed / 17;
        this.rotation += this.vr;
        if (this.x > Stage.canvas.width - this.width) {
          this.x = Stage.canvas.width - this.width;
          this.vx *= -1;
        } else if (this.x < 0) {
          this.x = 0;
          this.vx *= -1;
        }
        if (this.y > Stage.canvas.height - this.height) {
          this.y = Stage.canvas.height - this.height;
          this.vy *= -1;
        } else if (this.y < 0) {
          this.y = 0;
          this.vy *= -1;
        }
        this.setZIndex(Math.random());
        return this.rotation += 0.1;
      };

      return Block;

    })(Sprite);
  });

  require(['espresso/display/DisplayObject', 'Block', 'espresso/display/Stage', 'espresso/events/Input'], function(DisplayObject, Block, Stage, Input) {
    var block, blocks, canvas, i, player, stage, _i;
    canvas = document.getElementById('canvas');
    canvas.width = document.width;
    canvas.height = document.height;
    stage = new Stage(canvas);
    blocks = [];
    for (i = _i = 0; _i < 25; i = ++_i) {
      block = new Block(Math.random() * (canvas.width - 236), Math.random() * (canvas.height - 236));
      blocks.push(block);
      stage.addChild(block);
    }
    window.player = player = new Block(0, 0);
    stage.addChild(player);
    return stage.addEventListener('enterFrame', function(e) {
      var _j, _len;
      for (_j = 0, _len = blocks.length; _j < _len; _j++) {
        block = blocks[_j];
        block.update(e);
      }
      if (Input.isKeyDown('W')) {
        player.y -= 5 * e.elapsed / 17;
      }
      if (Input.isKeyDown('S')) {
        player.y += 5 * e.elapsed / 17;
      }
      if (Input.isKeyDown('D')) {
        player.x += 5 * e.elapsed / 17;
      }
      if (Input.isKeyDown('A')) {
        player.x -= 5 * e.elapsed / 17;
      }
      return player.rotation = Math.atan2(Input.mouseY - player.y, Input.mouseX - player.x) * 180.0 / Math.PI;
    });
  });

}).call(this);
