// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['espresso/display/DisplayObject', 'espresso/events/EnterFrameEvent', 'espresso/events/KeyboardEvent', 'espresso/events/MouseEvent', 'espresso/events/Input', 'espresso/events/EventDispatcher', 'espresso/utils/Augmentations'], function(DisplayObject, EnterFrameEvent, KeyboardEvent, MouseEvent, Input, EventDispatcher, Augmentations) {
    /*
    	# The top most display object of the application.
    */

    var Stage;
    return Stage = (function(_super) {

      __extends(Stage, _super);

      Stage.stage = null;

      Stage.canvas = null;

      Stage.ctx = null;

      Stage.touch = false;

      /*
      		# Construct a stage given an instance of the canvas.
      */


      function Stage(canvas) {
        this._update = __bind(this._update, this);

        this._mouseUp = __bind(this._mouseUp, this);

        this._mouseDown = __bind(this._mouseDown, this);

        this._domMousemove = __bind(this._domMousemove, this);

        this._domMouseup = __bind(this._domMouseup, this);

        this._domMousedown = __bind(this._domMousedown, this);

        this._domKeyup = __bind(this._domKeyup, this);

        this._domKeydown = __bind(this._domKeydown, this);
        Stage.__super__.constructor.call(this, 0, 0);
        this._previousTime = new Date().getTime();
        Stage.canvas = canvas;
        Stage.ctx = canvas.getContext('2d');
        Stage.stage = this;
        canvas.addEventListener('keydown', this._domKeydown, false);
        canvas.addEventListener('keyup', this._domKeyup, false);
        if ('ontouchstart' in document.documentElement) {
          canvas.addEventListener('touchstart', this._domMousedown, false);
          canvas.addEventListener('touchend', this._domMouseup, false);
          canvas.addEventListener('touchmove', this._domMousemove, false);
          Stage.touch = true;
        } else {
          canvas.addEventListener('mousedown', this._domMousedown, false);
          canvas.addEventListener('mouseup', this._domMousedown, false);
          canvas.addEventListener('mousemove', this._domMousemove, false);
        }
        canvas.tabIndex = '1';
        this.addEventListener('mouseDown', this._mouseDown);
        this.addEventListener('mouseUp', this._mouseUp);
        this._update();
      }

      Stage.prototype._domKeydown = function(e) {
        e = KeyboardEvent.fromDOMEvent(e);
        Input._keyCodeStates[e.keyCode] = true;
        Input._keyCharStates[e.keyChar] = true;
        return this.dispatchEvent(e);
      };

      Stage.prototype._domKeyup = function(e) {
        e = KeyboardEvent.fromDOMEvent(e);
        Input._keyCodeStates[e.keyCode] = false;
        Input._keyCharStates[e.keyChar] = false;
        return this.dispatchEvent(e);
      };

      Stage.prototype._domMousedown = function(e) {
        e.preventDefault();
        e = MouseEvent.fromDOMEvent(e, Input);
        Input._mouseButtonCodeStates[e.buttonCode] = true;
        Input._mouseButtonNameStates[e.buttonName] = true;
        Input.mouseX = e.x;
        Input.mouseY = e.y;
        return this.dispatchEvent(e);
      };

      Stage.prototype._domMouseup = function(e) {
        e.preventDefault();
        e = MouseEvent.fromDOMEvent(e, Input);
        Input._mouseButtonCodeStates[e.buttonCode] = false;
        Input._mouseButtonNameStates[e.buttonName] = false;
        return this.dispatchEvent(e);
      };

      Stage.prototype._domMousemove = function(e) {
        e.preventDefault();
        e = MouseEvent.fromDOMEvent(e, Input);
        Input.mouseX = e.x;
        Input.mouseY = e.y;
        console.log('move');
        console.log(e);
        return this.dispatchEvent(e);
      };

      Stage.prototype._mouseDown = function(e) {
        var mouseTarget, mouseTargets, _i, _len, _results;
        console.log('down');
        console.log(e);
        mouseTargets = EventDispatcher._mouseTargets;
        _results = [];
        for (_i = 0, _len = mouseTargets.length; _i < _len; _i++) {
          mouseTarget = mouseTargets[_i];
          if (mouseTarget._mouseOver) {
            e.target = mouseTarget;
            _results.push(mouseTarget.dispatchEvent(e, true));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Stage.prototype._mouseUp = function(e) {
        var mouseTarget, mouseTargets, _i, _len, _results;
        console.log('up');
        console.log(e);
        mouseTargets = EventDispatcher._mouseTargets;
        _results = [];
        for (_i = 0, _len = mouseTargets.length; _i < _len; _i++) {
          mouseTarget = mouseTargets[_i];
          if (mouseTarget._mouseOver) {
            e.target = mouseTarget;
            _results.push(mouseTarget.dispatchEvent(e, true));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      /*
      		# Internal render loop.
      */


      Stage.prototype._update = function() {
        var elapsed, event, eventInfo, eventInformation, mouseTarget, mouseTargets, now, _i, _j, _len, _len1;
        requestAnimationFrame(this._update);
        mouseTargets = EventDispatcher._mouseTargets;
        for (_i = 0, _len = mouseTargets.length; _i < _len; _i++) {
          mouseTarget = mouseTargets[_i];
          if (mouseTarget.containsPoint(Input.mouseX, Input.mouseY)) {
            if (!mouseTarget._mouseOver) {
              mouseTarget._mouseOver = true;
              mouseTarget.dispatchEvent(new MouseEvent(Input.mouseX, Input.mouseY, mouseTarget, 0, '', 'mouseOver'));
            }
          } else {
            if (mouseTarget._mouseOver) {
              mouseTarget._mouseOver = false;
              mouseTarget.dispatchEvent(new MouseEvent(Input.mouseX, Input.mouseY, mouseTarget, 0, '', 'mouseOff'));
            }
          }
        }
        now = new Date().getTime();
        elapsed = now - this._previousTime;
        event = new EnterFrameEvent(elapsed);
        this._previousTime = now;
        this.dispatchEvent(event, true);
        eventInformation = EventDispatcher.readEvents();
        for (_j = 0, _len1 = eventInformation.length; _j < _len1; _j++) {
          eventInfo = eventInformation[_j];
          eventInfo.dispatcher.dispatchEvent(eventInfo.event, true);
        }
        Stage.ctx.clearRect(0, 0, Stage.canvas.width, Stage.canvas.height);
        return this.render(Stage.ctx);
      };

      return Stage;

    })(DisplayObject);
  });

}).call(this);
