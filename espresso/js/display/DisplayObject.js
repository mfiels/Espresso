// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['espresso/events/EventDispatcher', 'espresso/events/Event'], function(EventDispatcher, Event) {
    /*
    	# A base class for displaying something on the canvas.
    */

    var DisplayObject;
    return DisplayObject = (function(_super) {

      __extends(DisplayObject, _super);

      /*
      		# Construct a DisplayObject at (x, y).
      */


      function DisplayObject(x, y) {
        this.x = x != null ? x : 0;
        this.y = y != null ? y : 0;
        DisplayObject.__super__.constructor.call(this);
        this.width = 0;
        this.height = 0;
        this.rotation = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.parent = null;
        this._children = [];
        this._zIndex = 1;
        this._mouseOver = false;
      }

      /*
      		# Add a child to this DisplayObject's display list.
      */


      DisplayObject.prototype.addChild = function(child) {
        if (child.parent) {
          child.parent.removeChild(child);
        }
        child.parent = this;
        return this._insertChild(child);
      };

      /*
      		# Test to see if a child is in the display list.
      */


      DisplayObject.prototype.containsChild = function(child) {
        return this._children.indexOf(child) !== -1;
      };

      /*
      		# Remove a child from this DisplayObject's display list.
      */


      DisplayObject.prototype.removeChild = function(child) {
        var index;
        index = this._children.indexOf(child);
        if (index !== -1) {
          this._children.splice(index, 1);
          this.parent = null;
          return true;
        }
        return false;
      };

      /*
      		# Set the zIndex.
      */


      DisplayObject.prototype.setZIndex = function(z) {
        var index;
        this._zIndex = z;
        index = this.parent._children.indexOf(this);
        this.parent._children.splice(index, 1);
        return this.parent._insertChild(this);
      };

      /*
      		# Get the zIndex.
      */


      DisplayObject.prototype.getZIndex = function() {
        return this._zIndex;
      };

      /*
      		# Given a child insert it in the display list in the right spot.
      */


      DisplayObject.prototype._insertChild = function(child) {
        var c, i, inserted, _i, _len, _ref;
        inserted = false;
        _ref = this._children;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          c = _ref[i];
          if (child._zIndex < c._zIndex) {
            this._children.splice(i, 0, child);
            inserted = true;
            break;
          }
        }
        if (!inserted) {
          return this._children.push(child);
        }
      };

      /*
      		# Transform and render this DisplayObject and all children.
      */


      DisplayObject.prototype.render = function(ctx) {
        var child, _i, _len, _ref;
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rotation * Math.PI / 180.0);
        ctx.scale(this.scaleX, this.scaleY);
        this._draw(ctx);
        _ref = this._children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          child.render(ctx);
        }
        return ctx.restore();
      };

      /*
      		# To be overridden.
      */


      DisplayObject.prototype._draw = function(ctx) {};

      /*
      		# Check to see if (x, y) is within this diplay object.
      */


      DisplayObject.prototype.containsPoint = function(x, y) {
        throw 'DisplayObject.containsPoint is not yet implemented';
      };

      return DisplayObject;

    })(EventDispatcher);
  });

}).call(this);
