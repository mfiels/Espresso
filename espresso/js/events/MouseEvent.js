// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['espresso/events/Event', 'espresso/display/Stage', 'espresso/events/Input'], function(Event, Stage, Input) {
    /*
    	# A class for mouseUp, mouseDown, and mouseMove events.
    */

    var MouseEvent;
    return MouseEvent = (function(_super) {

      __extends(MouseEvent, _super);

      MouseEvent._domEventMap = {
        'mousedown': 'mouseDown',
        'mouseup': 'mouseUp',
        'mousemove': 'mouseMove',
        'touchstart': 'mouseDown',
        'touchend': 'mouseUp',
        'touchmove': 'mouseMove'
      };

      /*
      		# Create a MouseEvent from a DOM event.
      */


      MouseEvent.fromDOMEvent = function(e) {
        var x, y;
        if (e.targetTouches) {
          x = e.targetTouches[0].screenX;
          y = e.targetTouches[0].screenY;
        } else {
          x = e.layerX;
          y = e.layerY;
        }
        return new MouseEvent(x, y, e.target, e.button, e.button === 0 ? 'left' : e.button === 1 ? 'middle' : e.button === 2 ? 'right' : '', this._domEventMap[e.type] ? this._domEventMap[e.type] : '');
      };

      /*
      		# Construct a MouseEvent for an (x, y) position and a specific button.
      */


      function MouseEvent(x, y, target, buttonCode, buttonName, type) {
        this.x = x;
        this.y = y;
        this.target = target;
        this.buttonCode = buttonCode;
        this.buttonName = buttonName;
        MouseEvent.__super__.constructor.call(this, type);
      }

      return MouseEvent;

    })(Event);
  });

}).call(this);
