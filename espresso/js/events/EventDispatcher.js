// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    /*
    	# Listens for and dispatches events.
    */

    var EventDispatcher;
    return EventDispatcher = (function() {

      EventDispatcher._bufferedEvents = [];

      /*
      		# Read all of the buffered events and clear the buffer.
      */


      EventDispatcher.readEvents = function() {
        var events;
        events = this._bufferedEvents;
        this._bufferedEvents = [];
        return events;
      };

      /*
      		# Construct a new EventDispatcher.
      */


      function EventDispatcher() {
        this._listeners = {};
      }

      /*
      		# Add an event listener of the specified type.
      */


      EventDispatcher.prototype.addEventListener = function(type, listener) {
        if (!this._listeners[type]) {
          this._listeners[type] = [];
        }
        return this._listeners[type].push(listener);
      };

      /*
      		# Remove an event listener of the specified type.
      */


      EventDispatcher.prototype.removeEventListener = function(type, listener) {
        var index;
        if (this._listeners[type]) {
          index = this._listeners[type].indexOf(listener);
          if (index !== -1) {
            this._listeners.splice(index, 1);
            return true;
          }
        }
        return false;
      };

      /*
      		# Notify listeners that an event occured.
      */


      EventDispatcher.prototype.dispatchEvent = function(event, now) {
        var listener, _i, _len, _ref;
        if (now == null) {
          now = false;
        }
        if (now) {
          if (event.type) {
            if (this._listeners[event.type]) {
              _ref = this._listeners[event.type];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                listener = _ref[_i];
                listener(event);
                if (event.cancel) {
                  break;
                }
              }
            }
          }
        } else {
          EventDispatcher._bufferedEvents.push(event);
        }
      };

      return EventDispatcher;

    })();
  });

}).call(this);
